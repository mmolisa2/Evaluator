#!/usr/bin/env python
import argparse # optparse is deprecated
from itertools import islice # slicing for iterators
 
def word_matches(h, ref):
    return sum(1 for w in h if w in ref)
 
def main():
    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    parser.add_argument('-i', '--input', default='data/hyp1-hyp2-ref',
            help='input file (default data/hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    parser.add_argument('-a', '--alpha', default=0.5, type=float,
            help='Alpha parameter to tune')
    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()
 
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with open(opts.input) as f:
            for pair in f:
                yield [sentence.strip().split() for sentence in pair.split(' ||| ')]
 
    # note: the -n option does not work in the original code
    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        rset = set(ref)
        h1_match = word_matches(h1, rset)
        h2_match = word_matches(h2, rset)
        h1_prec = float(h1_match)/float(len(h1))
        h2_prec = float(h2_match)/float(len(h2))
        h1_rec = float(h1_match)/float(len(ref))
        h2_rec = float(h2_match)/float(len(ref))
        if h1_prec == 0 or h1_rec == 0 :
          h1_score = 0
        else :
          h1_score = (h1_prec*h1_rec)/( (1-opts.alpha)*h1_rec + opts.alpha*h1_prec )
        if h2_prec == 0 or h2_rec == 0 :
          h2_score = 0
        else :
          h2_score = (h2_prec*h2_rec)/( (1-opts.alpha)*h2_rec + opts.alpha*h2_prec )
        #print("h1 precision: " + str(h1_prec))
        #print("h1 recall: " + str(h1_rec))
        #print("h1 score: " + str(h1_score))
        #print("h2 precision: " + str(h2_prec))
        #print("h2 recall: " + str(h2_rec))
        #print("h2 score: " + str(h2_score))
        print(1 if h1_score > h2_score else # \begin{cases}
                (0 if h1_score == h2_score
                    else -1)) # \end{cases}
 
# convention to allow import of this file as a module
if __name__ == '__main__':
    main()
